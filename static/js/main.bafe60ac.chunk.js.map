{"version":3,"sources":["components/gameGrid/GameGrid.tsx","components/header/Header.tsx","helpers/buildGrid.tsx","helpers/getCell.tsx","helpers/getRandomNumber.tsx","helpers/cellMovement.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/header/Header.module.scss","components/gameGrid/GameGrid.module.scss"],"names":["GameGrid","tryAgain","isGameOver","grid","newNumberIndex","className","styles","container","gameOver","onClick","map","cell","i","classNames","newNumber","Header","newGame","count","logo","tablo","score","best","localStorage","getItem","buttonWrapper","button","buildGrid","cellCount","cellFill","Array","fill","getCell","cells","newCells","num","_","random","availableCellIndexes","filter","length","getRandomNumber","splitArrayToRows","push","splice","splitArrayToColumns","newColumns","mergeLeft","row","filteredRow","mergeRight","reverse","keyPress","arrowKey","newGrid","moveRight","flat","moveLeft","filteredColumns","col","moveUp","moveDown","App","useState","setGrid","move","setMove","setIsGameOver","prevGrid","useRef","section","didMountRef","useEffect","setItem","current","Number","isEqual","reduce","acc","curr","JSON","stringify","first","second","index","getNewNumberIndex","focus","startNewGame","onKeyDown","e","key","style","height","outline","ref","tabIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bafe60ac.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport styles from './GameGrid.module.scss';\n\ninterface Props {\n  grid: number[];\n  newNumberIndex: number;\n  isGameOver: boolean;\n  tryAgain: () => void;\n}\n\nconst GameGrid: FC<Props> = ({\n  tryAgain,\n  isGameOver,\n  grid,\n  newNumberIndex,\n}) => {\n  return (\n    <>\n      <div className={styles.container}>\n        {isGameOver && (\n          <div className={styles.gameOver}>\n            <div>Game Over!</div>\n            <button\n              onClick={tryAgain}\n            >\n              Try again\n            </button>\n          </div>\n        )}\n        {grid.map((cell, i) => {\n          return (\n            <div\n              className={classNames({\n                [styles.cell]: true,\n                [styles[`number-${cell}`]]: cell,\n                [styles.newNumber]: i === newNumberIndex,\n              })}\n              key={`${i}`}\n            >\n              {cell > 0 && cell}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\nexport default GameGrid;\n","import React, { FC } from 'react';\nimport styles from './Header.module.scss';\n\ninterface Props {\n  count: number;\n  newGame: () => void;\n}\n\nconst Header: FC<Props> = ({ newGame, count }) => {\n  return (\n    <>\n      <div className={styles.container}>\n        <div className={styles.logo}>2048</div>\n        <div className={styles.tablo}>\n          <div className={styles.score}>\n            <span>score</span>\n            <span className={styles.count}>{count}</span>\n          </div>\n          <div className={styles.best}>\n            <span>best</span>\n            <span className={styles.count}>\n              {localStorage.getItem('bestScore')}\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className={styles.buttonWrapper}>\n        <button className={styles.button} onClick={newGame}>\n          New Game\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","export const buildGrid = (cellCount: number, cellFill: number) => {\n  return new Array(cellCount).fill(cellFill);\n};\n","import _ from 'lodash';\nimport { getRandomNumber } from './getRandomNumber';\n\nexport const getCell = (cells: number[]) => {\n  const newCells = [...cells];\n  const num = _.random(1, 10) === 1 ? 4 : 2;\n  newCells[getRandomNumber(cells)!] = num;\n  return newCells;\n};\n","import _ from 'lodash';\n\nexport const getRandomNumber = (cells: number[]) => {\n  const availableCellIndexes = cells\n    // eslint-disable-next-line array-callback-return\n    // eslint-disable-next-line consistent-return\n    .map((num, i) => {\n      if (!num) {\n        return i;\n      }\n    })\n    .filter((num) => num || num === 0);\n  const randomIndex = _.random(availableCellIndexes.length - 1);\n  return availableCellIndexes[randomIndex];\n};\n\nexport const getNewNumberIndex = (first: number[], second: number[]) => {\n  let index;\n  for (let i = 0; i < first.length; i++) {\n    if (first[i] !== second[i]) {\n      index = i;\n    }\n  }\n  return index;\n};\n","/* eslint-disable no-param-reassign */\nimport _ from 'lodash';\n\nexport const splitArrayToRows = (cells: number[]) => {\n  const newCells = [];\n  while (cells.length > 0) {\n    newCells.push(cells.splice(0, 4));\n  }\n  return newCells;\n};\n\nexport const splitArrayToColumns = (cells: number[]) => {\n  const newColumns: number[][] = [[], [], [], []];\n  for (let i = 0; i < 16; i++) {\n    if (i % 4 === 0) {\n      newColumns[0].push(cells[i]);\n      newColumns[1].push(cells[i + 1]);\n      newColumns[2].push(cells[i + 2]);\n      newColumns[3].push(cells[i + 3]);\n    }\n  }\n  return newColumns;\n};\n\nexport const mergeLeft = (row: number[]) => {\n  const filteredRow = [\n    ...row.filter((num) => num),\n    ...row.filter((num) => !num),\n  ];\n  const result = filteredRow.map((num, i) => {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      num *= 2;\n      filteredRow[i + 1] = 0;\n    }\n    return num;\n  });\n  return result;\n};\n\nexport const mergeRight = (row: number[]) => {\n  const filteredRow = [\n    ...row.filter((num) => !num),\n    ...row.filter((num) => num),\n  ];\n  const result = filteredRow.reverse().map((num, i) => {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      num *= 2;\n      filteredRow[i + 1] = 0;\n    }\n    return num;\n  });\n  return result.reverse();\n};\n\nexport const moveLeft = (cells: number[]) => {\n  const rows = [...splitArrayToRows(cells)];\n  const filteredRows = rows.map((row) => {\n    row = mergeLeft(row);\n    return [...row.filter((num) => num), ...row.filter((num) => !num)];\n  });\n  return filteredRows;\n};\n\nexport const moveRight = (cells: number[]) => {\n  const rows = [...splitArrayToRows(cells)];\n  const filteredRows = rows.map((row) => {\n    row = mergeRight(row);\n    return [...row.filter((num) => !num), ...row.filter((num) => num)];\n  });\n  return filteredRows;\n};\n\nexport const moveUp = (cells: number[]) => {\n  const columns = [...splitArrayToColumns(cells)];\n  const filteredColumns = columns.map((col) => {\n    col = mergeLeft(col);\n    return [...col.filter((num) => num), ...col.filter((num) => !num)];\n  });\n  const result = splitArrayToColumns(filteredColumns.flat());\n  return result;\n};\n\nexport const moveDown = (cells: number[]) => {\n  const columns = [...splitArrayToColumns(cells)];\n  const filteredColumns = columns.map((col) => {\n    col = mergeRight(col);\n    return [...col.filter((num) => !num), ...col.filter((num) => num)];\n  });\n  const result = splitArrayToColumns(filteredColumns.flat());\n  return result;\n};\n\nexport const keyPress = (arrowKey: string, cells: number[]) => {\n  let newGrid: number[] = [...cells];\n\n  if (arrowKey === 'ArrowRight') {\n    newGrid = [...moveRight(cells)].flat();\n  }\n\n  if (arrowKey === 'ArrowLeft') {\n    newGrid = [...moveLeft(cells)].flat();\n  }\n\n  if (arrowKey === 'ArrowUp') {\n    newGrid = [...moveUp(cells)].flat();\n  }\n  if (arrowKey === 'ArrowDown') {\n    newGrid = [...moveDown(cells)].flat();\n  }\n  return newGrid;\n};\n\nexport const checkIfGameOver = (cells: number[]) => {\n  const isGameOver =\n    _.isEqual(cells, keyPress('ArrowRight', [...cells])) &&\n    _.isEqual(cells, keyPress('ArrowLeft', [...cells])) &&\n    _.isEqual(cells, keyPress('ArrowUp', [...cells])) &&\n    _.isEqual(cells, keyPress('ArrowDown', [...cells]));\n  return isGameOver;\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport GameGrid from './components/gameGrid/GameGrid';\nimport Header from './components/header/Header';\nimport { buildGrid } from './helpers/buildGrid';\nimport { getCell } from './helpers/getCell';\nimport { keyPress, checkIfGameOver } from './helpers/cellMovement';\nimport { getNewNumberIndex } from './helpers/getRandomNumber';\n\nconst App = () => {\n  const [grid, setGrid] = useState(buildGrid(16, 0));\n  const [move, setMove] = useState(keyPress('', grid));\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const prevGrid = useRef<string>();\n  const section = useRef<HTMLTableSectionElement>(null);\n  const newNumberIndex = useRef<number>();\n  const count = useRef(0);\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    setGrid(getCell(getCell(buildGrid(16, 0))));\n  }, []);\n\n  useEffect(() => {\n    if (localStorage.getItem('bestScore') === null) {\n      localStorage.setItem('bestScore', '0');\n    }\n    if (\n      isGameOver &&\n      count.current > Number(localStorage.getItem('bestScore'))\n    ) {\n      localStorage.setItem('bestScore', `${count.current}`);\n    }\n  }, [isGameOver]);\n\n  useEffect(() => {\n    if (didMountRef.current) {\n      if (checkIfGameOver(grid) && count.current) {\n        setIsGameOver(true);\n      }\n      count.current = grid.reduce((acc, curr) => acc + curr);\n      if (JSON.stringify(grid) !== prevGrid.current) {\n        const newGrid = getCell(grid);\n        setGrid(newGrid);\n        newNumberIndex.current = getNewNumberIndex(grid, newGrid);\n      }\n    }\n    didMountRef.current = true;\n    section.current?.focus();\n  }, [move]);\n\n  const startNewGame = () => {\n    count.current = 0;\n    setIsGameOver(false);\n    setGrid(getCell(getCell(buildGrid(16, 0))));\n    section.current?.focus();\n  };\n\n  return (\n    <section\n      onKeyDown={(e) => {\n        prevGrid.current = JSON.stringify(grid);\n\n        setGrid(keyPress(e.key, grid));\n\n        setMove(keyPress(e.key, grid));\n      }}\n      style={{ height: '100vh', outline: 'none' }}\n      ref={section}\n      tabIndex={0}\n    >\n      <Header newGame={startNewGame} count={count.current} />\n      <GameGrid\n        tryAgain={startNewGame}\n        isGameOver={isGameOver}\n        newNumberIndex={newNumberIndex.current!}\n        grid={grid}\n      />\n    </section>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__29Cyd\",\"logo\":\"Header_logo__2gAbO\",\"tablo\":\"Header_tablo__1_uJ3\",\"score\":\"Header_score__i6kSy\",\"best\":\"Header_best__3QPBN\",\"count\":\"Header_count__3Bxrb\",\"buttonWrapper\":\"Header_buttonWrapper__ukTCG\",\"button\":\"Header_button__1JOra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameGrid_container__1x5lS\",\"cell\":\"GameGrid_cell__1PKC1\",\"cellTwo\":\"GameGrid_cellTwo__3cshy\",\"number-2\":\"GameGrid_number-2__lU4t-\",\"number-4\":\"GameGrid_number-4__3eoCB\",\"number-8\":\"GameGrid_number-8__3iuxV\",\"number-16\":\"GameGrid_number-16__nYtd6\",\"number-32\":\"GameGrid_number-32__2f51e\",\"number-64\":\"GameGrid_number-64__3mowy\",\"number-128\":\"GameGrid_number-128__eDi3A\",\"number-256\":\"GameGrid_number-256__oOne2\",\"number-512\":\"GameGrid_number-512__3pnOU\",\"number-1024\":\"GameGrid_number-1024__2HSw7\",\"newNumber\":\"GameGrid_newNumber__2SjoQ\",\"newNum\":\"GameGrid_newNum__-5Mfv\",\"ddd\":\"GameGrid_ddd__q9htc\",\"gameOver\":\"GameGrid_gameOver__2UO6M\"};"],"sourceRoot":""}